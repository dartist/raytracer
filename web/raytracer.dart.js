// Generated by dart2js, the Dart to JavaScript compiler version: 0.5.16.0_r23799.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AreaElement = {"": "Element;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;"};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height},width}",
  get$context2D: function(receiver) {
    return receiver.getContext("2d");
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.Comment = {"": "CharacterData;"};

$$.ContentElement = {"": "Element;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DialogElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;"};

$$.DocumentFragment = {"": "Node;"};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;",
  toString$0: function(receiver) {
    return receiver.localName;
  }
};

$$.EmbedElement = {"": "Element;height},width}"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;"};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;"};

$$.FieldSetElement = {"": "Element;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FormElement = {"": "Element;length="};

$$.HRElement = {"": "Element;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.IFrameElement = {"": "Element;height},width}"};

$$.ImageElement = {"": "Element;height},width},x=,y="};

$$.InputElement = {"": "Element;height},width}"};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;"};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;"};

$$.ModElement = {"": "Element;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  }
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;"};

$$.ObjectElement = {"": "Element;height},width}"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;"};

$$.OutputElement = {"": "Element;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;"};

$$.QuoteElement = {"": "Element;"};

$$.ScriptElement = {"": "Element;"};

$$.SelectElement = {"": "Element;length="};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;"};

$$.SourceElement = {"": "Element;"};

$$.SpanElement = {"": "Element;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.StyleElement = {"": "Element;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;"};

$$.TitleElement = {"": "Element;"};

$$.TrackElement = {"": "Element;"};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height},width}"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._Attr = {"": "Node;"};

$$._Entity = {"": "Node;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;r="};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;x=,y="};

$$.FECompositeElement = {"": "StyledElement;x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;x=,y="};

$$.FEImageElement = {"": "StyledElement;x=,y="};

$$.FEMergeElement = {"": "StyledElement;x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;x=,y="};

$$.FEOffsetElement = {"": "StyledElement;x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y=,z="};

$$.FESpecularLightingElement = {"": "StyledElement;x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y=,z="};

$$.FETileElement = {"": "StyledElement;x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;x=,y="};

$$.FilterElement = {"": "StyledElement;x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_GradientElement;r="};

$$.RectElement = {"": "StyledElement;x=,y="};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;"};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

// Bound closures
$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      if (property.substring(0, 1) == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[property] = element;
        functions.push(property);
      } else {
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          var firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["_interceptors", "dart:_interceptors", , {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  }
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isList: true,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $asJSArray: function() { return [null]; }, $asList: function() { return [null]; }, $asIterable: function() { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  floor$0: function(receiver) {
    var t1, truncated;
    t1 = Math.floor(receiver);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $isString: true
},

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
}}],
["_js_helper", "dart:_js_helper", , {
DartError: {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

Null: {"": "Object;"},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression(new $.ArgumentError(index));
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return new $.invokeClosure_closure(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1))
    return new $.invokeClosure_closure0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2))
    return new $.invokeClosure_closure1(closure, arg1, arg2).call$0();
  else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.isJsIndexable(types, types[$.dispatchPropertyName])))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

joinArguments$bailout: function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor$asx(types);
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSInt_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

toStringForNativeObject: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, t1, t2, $length);
    t3 = this._liblib$_length;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, $length, t3);
    if (t3 !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2, $length, t3) {
    switch (state0) {
      case 0:
        t1 = this._iterable;
        t2 = $.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
      case 1:
        state0 = 0;
        t3 = this._liblib$_length;
      case 2:
        state0 = 0;
        if (!$.$eq(t3, $length))
          throw $.wrapException(new $.ConcurrentModificationError(t1));
        if ($.JSNumber_methods.$ge(this._index, $length)) {
          this._liblib$_current = null;
          return false;
        }
        this._liblib$_current = t2.elementAt$1(t1, this._index);
        this._index = this._index + 1;
        return true;
    }
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
},

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = new $.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._liblib$_current);
  return initialValue;
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
}}],
["dart.collection", "dart:collection", , {
ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, receiver.length);
    } else
      result = $.List_List(receiver.length);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else
      result = $.List_List(this.get$length(receiver));
    for (i = 0; $.JSInt_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
}}],
["dart.core", "dart:core", , {
NullThrownError: {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

UnsupportedError: {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

StateError: {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Object;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + $.Error_safeToString(this.modifiedObject) + ".";
  }
},

CyclicInitializationError: {"": "Object;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    return "Exception: " + this.message;
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  }
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  }
},

Error_safeToString: function(object) {
  if (false)
    return $.toString$0(object);
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

ArgumentError$: function(message) {
  return new $.ArgumentError(message);
},

List_List: function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
}}],
["dart.dom.html", "dart:html", , {
_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1)) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
},

CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas");
  $.set$width$x(e, width);
  $.set$height$x(e, height);
  return e;
}}],
["raytracer.dart", "raytracer.dart", , {
Vector: {"": "Object;x>,y>,z>",
  $sub: function(_, v) {
    var t1, t2, t3, t4;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, v, t1);
    t2 = $.getInterceptor$x(v);
    t3 = t2.get$x(v);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, v, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, v, t1, t2, t3);
    t4 = t2.get$y(v);
    if (typeof t4 !== "number")
      return this.$$sub$bailout(4, v, t1, t2, t3, t4);
    t4 = t1 - t4;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(5, v, t1, t2, t3, t4);
    t2 = t2.get$z(v);
    if (typeof t2 !== "number")
      return this.$$sub$bailout(6, 0, t1, t2, t3, t4);
    return new $.Vector(t3, t4, t1 - t2);
  },
  $$sub$bailout: function(state0, v, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(v);
        t3 = t2.get$x(v);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t4 = t2.get$y(v);
      case 4:
        state0 = 0;
        t4 = $.$sub$n(t1, t4);
        t1 = this.z;
      case 5:
        state0 = 0;
        t2 = t2.get$z(v);
      case 6:
        state0 = 0;
        return new $.Vector(t3, t4, $.$sub$n(t1, t2));
    }
  },
  $add: function(_, v) {
    var t1, t2, t3, t4;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, v, t1);
    t2 = $.getInterceptor$x(v);
    t3 = t2.get$x(v);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, v, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, v, t1, t2, t3);
    t4 = t2.get$y(v);
    if (typeof t4 !== "number")
      return this.$$add$bailout(4, v, t1, t2, t3, t4);
    t4 = t1 + t4;
    t1 = this.z;
    if (typeof t1 !== "number")
      return this.$$add$bailout(5, v, t1, t2, t3, t4);
    t2 = t2.get$z(v);
    if (typeof t2 !== "number")
      return this.$$add$bailout(6, 0, t1, t2, t3, t4);
    return new $.Vector(t3, t4, t1 + t2);
  },
  $$add$bailout: function(state0, v, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(v);
        t3 = t2.get$x(v);
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t4 = t2.get$y(v);
      case 4:
        state0 = 0;
        t4 = $.$add$ns(t1, t4);
        t1 = this.z;
      case 5:
        state0 = 0;
        t2 = t2.get$z(v);
      case 6:
        state0 = 0;
        return new $.Vector(t3, t4, $.$add$ns(t1, t2));
    }
  }
},

Color: {"": "Object;r>,g<,b<",
  $add: function(_, v) {
    var t1, t2, t3, t4;
    t1 = this.r;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, v, t1);
    t2 = $.get$r$x(v);
    if (typeof t2 !== "number")
      return this.$$add$bailout(2, v, t1, t2);
    t2 = t1 + t2;
    t1 = this.g;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, v, t1, t2);
    t3 = v.get$g();
    if (typeof t3 !== "number")
      return this.$$add$bailout(4, v, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.b;
    if (typeof t1 !== "number")
      return this.$$add$bailout(5, v, t1, t2, t3);
    t4 = v.get$b();
    if (typeof t4 !== "number")
      return this.$$add$bailout(6, 0, t1, t2, t3, t4);
    return new $.Color(t2, t3, t1 + t4);
  },
  $$add$bailout: function(state0, v, t1, t2, t3, t4) {
    switch (state0) {
      case 0:
        t1 = this.r;
      case 1:
        state0 = 0;
        t2 = $.get$r$x(v);
      case 2:
        state0 = 0;
        t2 = $.$add$ns(t1, t2);
        t1 = this.g;
      case 3:
        state0 = 0;
        t3 = v.get$g();
      case 4:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.b;
      case 5:
        state0 = 0;
        t4 = v.get$b();
      case 6:
        state0 = 0;
        return new $.Color(t2, t3, $.$add$ns(t1, t4));
    }
  },
  $mul: function(_, v) {
    return new $.Color($.$mul$n(this.r, $.get$r$x(v)), $.$mul$n(this.g, v.get$g()), $.$mul$n(this.b, v.get$b()));
  }
},

Camera: {"": "Object;pos<,forward<,right<,up<",
  Camera$2: function(pos, lookAt) {
    var t1, t2, t3, t4, _mag, div;
    t1 = this.pos;
    t1 = new $.Vector($.$sub$n(lookAt.x, t1.x), $.$sub$n(lookAt.y, t1.y), $.$sub$n(lookAt.z, t1.z));
    t2 = t1.x;
    t3 = t1.y;
    t1 = t1.z;
    t4 = $.$add$ns($.$add$ns($.$mul$n(t2, t2), $.$mul$n(t3, t3)), $.$mul$n(t1, t1));
    if (typeof t4 !== "number")
      $.throwExpression($.ArgumentError$(t4));
    _mag = Math.sqrt(t4);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.forward = new $.Vector(div * t2, div * t3, div * t1);
    t1 = $.Vector_cross(this.forward, new $.Vector(0, -1, 0));
    t2 = t1.x;
    t3 = t1.y;
    t1 = t1.z;
    t4 = $.$add$ns($.$add$ns($.$mul$n(t2, t2), $.$mul$n(t3, t3)), $.$mul$n(t1, t1));
    if (typeof t4 !== "number")
      $.throwExpression($.ArgumentError$(t4));
    _mag = Math.sqrt(t4);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t1 = new $.Vector(div * t2, div * t3, div * t1);
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = t1.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1 = t1.z;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.right = new $.Vector(1.5 * t2, 1.5 * t3, 1.5 * t1);
    t1 = $.Vector_cross(this.forward, this.right);
    t3 = t1.x;
    t2 = t1.y;
    t1 = t1.z;
    t4 = $.$add$ns($.$add$ns($.$mul$n(t3, t3), $.$mul$n(t2, t2)), $.$mul$n(t1, t1));
    if (typeof t4 !== "number")
      $.throwExpression($.ArgumentError$(t4));
    _mag = Math.sqrt(t4);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t1 = new $.Vector(div * t3, div * t2, div * t1);
    t2 = t1.x;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = t1.y;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t1 = t1.z;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.up = new $.Vector(1.5 * t2, 1.5 * t3, 1.5 * t1);
  }
},

Ray: {"": "Object;start,dir"},

Intersection: {"": "Object;thing,ray,dist"},

Light: {"": "Object;pos<,color<"},

Scene: {"": "Object;things<,lights,camera"},

Sphere: {"": "Object;radius2,radius,center,surface<",
  normal$1: function(pos) {
    var t1, t2, t3, t4, _mag, div;
    t1 = this.center;
    t1 = new $.Vector($.$sub$n(pos.x, t1.x), $.$sub$n(pos.y, t1.y), $.$sub$n(pos.z, t1.z));
    t2 = t1.x;
    t3 = t1.y;
    t1 = t1.z;
    t4 = $.$add$ns($.$add$ns($.$mul$n(t2, t2), $.$mul$n(t3, t3)), $.$mul$n(t1, t1));
    if (typeof t4 !== "number")
      $.throwExpression($.ArgumentError$(t4));
    _mag = Math.sqrt(t4);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return new $.Vector(div * t2, div * t3, div * t1);
  },
  intersect$1: function(ray) {
    var t1, t2, t3, eo, t4, t5, t6, t7, t8, v, disc, dist;
    t1 = this.center;
    t2 = ray.start;
    t3 = $.getInterceptor$x(t2);
    eo = new $.Vector($.$sub$n(t1.x, t3.get$x(t2)), $.$sub$n(t1.y, t3.get$y(t2)), $.$sub$n(t1.z, t3.get$z(t2)));
    t2 = ray.dir;
    t3 = eo.x;
    t1 = $.getInterceptor$x(t2);
    t4 = $.getInterceptor$n(t3);
    t5 = eo.y;
    t6 = $.getInterceptor$n(t5);
    t7 = eo.z;
    t8 = $.getInterceptor$n(t7);
    v = $.$add$ns($.$add$ns(t4.$mul(t3, t1.get$x(t2)), t6.$mul(t5, t1.get$y(t2))), t8.$mul(t7, t1.get$z(t2)));
    t1 = $.getInterceptor$n(v);
    if (t1.$ge(v, 0)) {
      disc = $.$sub$n(this.radius2, $.$sub$n($.$add$ns($.$add$ns(t4.$mul(t3, t3), t6.$mul(t5, t5)), t8.$mul(t7, t7)), t1.$mul(v, v)));
      if (disc >= 0)
        dist = t1.$sub(v, Math.sqrt(disc));
      else
        dist = 0;
    } else
      dist = 0;
    return dist === 0 ? null : new $.Intersection(this, ray, dist);
  }
},

Plane: {"": "Object;norm,offset,surface<",
  normal$1: function(pos) {
    return this.norm;
  },
  intersect$1: function(ray) {
    var t1, t2, t3, t4, t5, t6, t7, t8, denom, t9;
    t1 = this.norm;
    t2 = ray.dir;
    t3 = t1.x;
    t4 = $.getInterceptor$x(t2);
    t5 = $.getInterceptor$n(t3);
    t6 = t1.y;
    t7 = $.getInterceptor$n(t6);
    t1 = t1.z;
    t8 = $.getInterceptor$n(t1);
    denom = $.$add$ns($.$add$ns(t5.$mul(t3, t4.get$x(t2)), t7.$mul(t6, t4.get$y(t2))), t8.$mul(t1, t4.get$z(t2)));
    t2 = $.getInterceptor$n(denom);
    if (t2.$gt(denom, 0))
      return;
    else {
      t4 = ray.start;
      t9 = $.getInterceptor$x(t4);
      return new $.Intersection(this, ray, $.$div$n($.$add$ns($.$add$ns($.$add$ns(t5.$mul(t3, t9.get$x(t4)), t7.$mul(t6, t9.get$y(t4))), t8.$mul(t1, t9.get$z(t4))), this.offset), t2.$negate(denom)));
    }
  }
},

CustomSurface: {"": "Object;diffuseColor,specularColor,roughness<,reflectPos",
  diffuse$1: function(pos) {
    return this.diffuseColor;
  },
  specular$1: function(pos) {
    return this.specularColor;
  },
  reflect$1: function(pos) {
    return this.reflectPos;
  }
},

CheckerBoardSurface: {"": "Object;roughness<",
  diffuse$1: function(pos) {
    return $.JSNumber_methods.$mod($.floor$0$n(pos.z) + $.floor$0$n(pos.x), 2) !== 0 ? $.get$Color_white() : $.get$Color_black();
  },
  specular$1: function(pos) {
    return $.get$Color_white();
  },
  reflect$1: function(pos) {
    return $.JSNumber_methods.$mod($.floor$0$n(pos.z) + $.floor$0$n(pos.x), 2) !== 0 ? 0.1 : 0.7;
  }
},

RayTracer: {"": "Object;_maxDepth",
  _intersections$2: function(ray, scene) {
    var t1, closest, closestInter, inter;
    for (t1 = scene.get$things(), t1 = new $.ListIterator(t1, t1.length, 0, null), closest = 1 / 0, closestInter = null; t1.moveNext$0();) {
      inter = t1._liblib$_current.intersect$1(ray);
      if (inter != null && inter.dist < closest) {
        closest = inter.dist;
        closestInter = inter;
      }
    }
    return closestInter;
  },
  _shade$3: function(isect, scene, depth) {
    var t1, d, t2, t3, t4, t5, t6, pos, normal, t7, reflectDir, naturalColor, reflectedColor;
    t1 = isect.ray;
    d = t1.dir;
    t2 = isect.dist;
    t3 = $.getInterceptor$x(d);
    t4 = t3.get$x(d);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t3.get$y(d);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = t3.get$z(d);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t6 = new $.Vector(t2 * t4, t2 * t5, t2 * t6);
    t1 = t1.start;
    t2 = $.getInterceptor$x(t1);
    pos = new $.Vector($.$add$ns(t6.x, t2.get$x(t1)), $.$add$ns(t6.y, t2.get$y(t1)), $.$add$ns(t6.z, t2.get$z(t1)));
    t1 = isect.thing;
    normal = t1.normal$1(pos);
    t2 = normal.x;
    t6 = normal.y;
    t5 = normal.z;
    t4 = $.$add$ns($.$add$ns($.$mul$n(t2, t3.get$x(d)), $.$mul$n(t6, t3.get$y(d))), $.$mul$n(t5, t3.get$z(d)));
    t7 = $.getInterceptor$n(t4);
    t5 = new $.Vector(t7.$mul(t4, t2), t7.$mul(t4, t6), t7.$mul(t4, t5));
    t4 = t5.x;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t7 = t5.y;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t5 = t5.z;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    reflectDir = t3.$sub(d, new $.Vector(2 * t4, 2 * t7, 2 * t5));
    t5 = $.get$Color_background();
    t7 = this._getNaturalColor$5(t1, pos, normal, reflectDir, scene);
    naturalColor = new $.Color($.$add$ns(t5.r, $.get$r$x(t7)), $.$add$ns(t5.g, t7.get$g()), $.$add$ns(t5.b, t7.get$b()));
    if (depth >= this._maxDepth)
      reflectedColor = $.get$Color_grey();
    else {
      t1 = t1.get$surface().reflect$1(pos);
      isect = this._intersections$2(new $.Ray(pos, reflectDir), scene);
      t2 = isect == null ? $.get$Color_background() : this._shade$3(isect, scene, depth + 1);
      t3 = t2.r;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4 = t2.g;
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t2 = t2.b;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      reflectedColor = new $.Color(t1 * t3, t1 * t4, t1 * t2);
    }
    return new $.Color($.$add$ns(naturalColor.r, reflectedColor.r), $.$add$ns(naturalColor.g, reflectedColor.g), $.$add$ns(naturalColor.b, reflectedColor.b));
  },
  _getNaturalColor$5: function(thing, pos, norm, rd, scene) {
    return $.IterableMixinWorkaround_fold(scene.lights, $.get$Color_defaultColor(), new $.RayTracer__getNaturalColor_closure(this, thing, pos, norm, rd, scene));
  },
  render$4: function(scene, ctx, screenWidth, screenHeight) {
    var getPoint, t1, t2, y, y0, x, isect, color, t3, t4, x0;
    getPoint = new $.RayTracer_render_closure(screenWidth, screenHeight);
    for (t1 = scene.camera, t2 = t1.pos, y = 0; y < screenHeight; y = y0)
      for (y0 = y + 1, x = 0; x < screenWidth; x = x0) {
        isect = this._intersections$2(new $.Ray(t2, getPoint.call$3(x, y, t1)), scene);
        color = isect == null ? $.get$Color_background() : this._shade$3(isect, scene, 0);
        t3 = color.r;
        t3 = "rgb(" + $.S($.toInt$0$n($.$mul$n($.$gt$n(t3, 1) ? 1 : t3, 255))) + ", ";
        t4 = color.g;
        t3 = t3 + $.S($.toInt$0$n($.$mul$n($.$gt$n(t4, 1) ? 1 : t4, 255))) + ", ";
        t4 = color.b;
        ctx.fillStyle = t3 + $.S($.toInt$0$n($.$mul$n($.$gt$n(t4, 1) ? 1 : t4, 255))) + ")";
        x0 = x + 1;
        ctx.fillRect(x, y, x0, y0);
      }
  }
},

RayTracer__getNaturalColor_closure: {"": "Closure;this_0,thing_1,pos_2,norm_3,rd_4,scene_5",
  call$2: function(col, light) {
    var t1, t2, ldis, t3, t4, t5, _mag, div, livec, isect, neatIsect, isInShadow, t6, t7, t8, illum, t9, lcolor, t10, t11, specular, scolor;
    t1 = light.get$pos();
    t2 = this.pos_2;
    ldis = new $.Vector($.$sub$n(t1.x, t2.x), $.$sub$n(t1.y, t2.y), $.$sub$n(t1.z, t2.z));
    t1 = ldis.x;
    t3 = ldis.y;
    t4 = ldis.z;
    t5 = $.$add$ns($.$add$ns($.$mul$n(t1, t1), $.$mul$n(t3, t3)), $.$mul$n(t4, t4));
    if (typeof t5 !== "number")
      $.throwExpression($.ArgumentError$(t5));
    _mag = Math.sqrt(t5);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    livec = new $.Vector(div * t1, div * t3, div * t4);
    isect = this.this_0._intersections$2(new $.Ray(t2, livec), this.scene_5);
    neatIsect = isect != null ? isect.dist : null;
    if (neatIsect == null)
      isInShadow = false;
    else {
      t1 = $.$add$ns($.$add$ns(t1 * t1, t3 * t3), t4 * t4);
      if (typeof t1 !== "number")
        $.throwExpression(new $.ArgumentError(t1));
      isInShadow = $.$le$n(neatIsect, Math.sqrt(t1));
    }
    if (isInShadow)
      return col;
    else {
      t1 = this.norm_3;
      t3 = livec.x;
      t4 = $.getInterceptor$n(t3);
      t5 = livec.y;
      t6 = $.getInterceptor$n(t5);
      t7 = livec.z;
      t8 = $.getInterceptor$n(t7);
      illum = $.$add$ns($.$add$ns(t4.$mul(t3, t1.x), t6.$mul(t5, t1.y)), t8.$mul(t7, t1.z));
      t1 = $.getInterceptor$n(illum);
      if (t1.$gt(illum, 0)) {
        t9 = light.get$color();
        lcolor = new $.Color(t1.$mul(illum, t9.r), t1.$mul(illum, t9.g), t1.$mul(illum, t9.b));
      } else
        lcolor = $.get$Color_defaultColor();
      t1 = this.rd_4;
      t9 = $.getInterceptor$x(t1);
      t10 = t9.get$x(t1);
      t10 = $.$mul$n(t10, t10);
      t11 = t9.get$y(t1);
      t11 = $.$add$ns(t10, $.$mul$n(t11, t11));
      t10 = t9.get$z(t1);
      t10 = $.$add$ns(t11, $.$mul$n(t10, t10));
      if (typeof t10 !== "number")
        $.throwExpression($.ArgumentError$(t10));
      _mag = Math.sqrt(t10);
      div = _mag === 0 ? 1 / 0 : 1 / _mag;
      t10 = t9.get$x(t1);
      if (typeof t10 !== "number")
        throw $.iae(t10);
      t11 = t9.get$y(t1);
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t1 = t9.get$z(t1);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = new $.Vector(div * t10, div * t11, div * t1);
      specular = $.$add$ns($.$add$ns(t4.$mul(t3, t1.x), t6.$mul(t5, t1.y)), t8.$mul(t7, t1.z));
      if ($.$gt$n(specular, 0)) {
        t1 = this.thing_1.get$surface().get$roughness();
        if (typeof specular !== "number")
          $.throwExpression(new $.ArgumentError(specular));
        t1 = Math.pow(specular, t1);
        t3 = light.get$color();
        t4 = t3.r;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        t5 = t3.g;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t3 = t3.b;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        scolor = new $.Color(t1 * t4, t1 * t5, t1 * t3);
      } else
        scolor = $.get$Color_defaultColor();
      t1 = this.thing_1;
      t3 = t1.get$surface().diffuse$1(t2);
      t3 = $.$add$ns(col, new $.Color($.$mul$n(t3.r, lcolor.r), $.$mul$n(t3.g, lcolor.g), $.$mul$n(t3.b, lcolor.b)));
      t2 = t1.get$surface().specular$1(t2);
      return $.$add$ns(t3, new $.Color($.$mul$n(t2.r, scolor.r), $.$mul$n(t2.g, scolor.g), $.$mul$n(t2.b, scolor.b)));
    }
  }
},

RayTracer_render_closure: {"": "Closure;screenWidth_0,screenHeight_1",
  call$3: function(x, y, camera) {
    var t1, t2, t3, t4, t5, _mag, div;
    t1 = camera.get$forward();
    t2 = new $.RayTracer_render__closure(this.screenWidth_0).call$1(x);
    t3 = camera.get$right();
    t4 = $.getInterceptor$x(t3);
    t5 = $.getInterceptor$n(t2);
    t3 = new $.Vector(t5.$mul(t2, t4.get$x(t3)), t5.$mul(t2, t4.get$y(t3)), t5.$mul(t2, t4.get$z(t3)));
    t3 = new $.Vector($.$add$ns(t1.x, t3.x), $.$add$ns(t1.y, t3.y), $.$add$ns(t1.z, t3.z));
    t1 = new $.RayTracer_render__closure0(this.screenHeight_1).call$1(y);
    t4 = camera.get$up();
    t2 = $.getInterceptor$n(t1);
    t4 = new $.Vector(t2.$mul(t1, t4.x), t2.$mul(t1, t4.y), t2.$mul(t1, t4.z));
    t4 = new $.Vector($.$add$ns(t3.x, t4.x), $.$add$ns(t3.y, t4.y), $.$add$ns(t3.z, t4.z));
    t3 = t4.x;
    t1 = t4.y;
    t4 = t4.z;
    t2 = $.$add$ns($.$add$ns($.$mul$n(t3, t3), $.$mul$n(t1, t1)), $.$mul$n(t4, t4));
    if (typeof t2 !== "number")
      $.throwExpression($.ArgumentError$(t2));
    _mag = Math.sqrt(t2);
    div = _mag === 0 ? 1 / 0 : 1 / _mag;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    return new $.Vector(div * t3, div * t1, div * t4);
  }
},

RayTracer_render__closure: {"": "Closure;screenWidth_2",
  call$1: function(x) {
    var t1 = this.screenWidth_2;
    return $.$div$n($.$sub$n(x, t1 / 2), 2) / t1;
  }
},

RayTracer_render__closure0: {"": "Closure;screenHeight_3",
  call$1: function(y) {
    var t1 = this.screenHeight_3;
    return $.$negate$n($.$sub$n(y, t1 / 2)) / 2 / t1;
  }
},

defaultScene: function() {
  var t1, t2, t3, t4;
  t1 = $.get$Surfaces_checkerboard();
  t2 = new $.Sphere(null, 1, new $.Vector(0, 1, -0.25), $.get$Surfaces_shiny());
  t3 = t2.radius;
  t2.radius2 = t3 * t3;
  t3 = new $.Sphere(null, 0.5, new $.Vector(-1, 0.5, 1.5), $.get$Surfaces_shiny());
  t4 = t3.radius;
  t3.radius2 = t4 * t4;
  return new $.Scene([new $.Plane(new $.Vector(0, 1, 0), 0, t1), t2, t3], [new $.Light(new $.Vector(-2, 2.5, 0), new $.Color(0.49, 0.07, 0.07)), new $.Light(new $.Vector(1.5, 2.5, 1.5), new $.Color(0.07, 0.07, 0.49)), new $.Light(new $.Vector(1.5, 2.5, -1.5), new $.Color(0.07, 0.49, 0.071)), new $.Light(new $.Vector(0, 3.5, 0), new $.Color(0.21, 0.21, 0.35))], $.Camera$(new $.Vector(3, 2, 4), new $.Vector(-1, 0.5, 0)));
},

main: function() {
  var c, t1;
  c = $.CanvasElement_CanvasElement(512, 512);
  t1 = document.body;
  t1.get$children;
  new $._ChildrenElementList(t1, t1.children)._element.appendChild(c);
  new $.RayTracer(5).render$4($.defaultScene(), $.get$context2D$x(c), 512, 512);
},

Vector_cross: function(v1, v2) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = v1.y;
  t2 = v2.z;
  t3 = $.getInterceptor$n(t1);
  t4 = v1.z;
  t5 = v2.y;
  t6 = $.getInterceptor$n(t4);
  t7 = v2.x;
  t8 = v1.x;
  t9 = $.getInterceptor$n(t8);
  return new $.Vector($.$sub$n(t3.$mul(t1, t2), t6.$mul(t4, t5)), $.$sub$n(t6.$mul(t4, t7), t9.$mul(t8, t2)), $.$sub$n(t9.$mul(t8, t5), t3.$mul(t1, t7)));
},

Camera$: function(pos, lookAt) {
  var t1 = new $.Camera(pos, null, null, null);
  t1.Camera$2(pos, lookAt);
  return t1;
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.C_JSUnknown = new $.JSUnknown();
$.JSInt_methods = $.JSInt.prototype;
$.C_NullThrownError = new $.NullThrownError();
$.JSArray_methods = $.JSArray.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.dispatchPropertyName = null;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.floor$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).floor$0(receiver);
};
$.get$context2D$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2D(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$r$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$r(receiver);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.toInt$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toInt$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "white", "Color_white", "get$Color_white", function() {
  return new $.Color(1, 1, 1);
});
Isolate.$lazy($, "grey", "Color_grey", "get$Color_grey", function() {
  return new $.Color(0.5, 0.5, 0.5);
});
Isolate.$lazy($, "black", "Color_black", "get$Color_black", function() {
  return new $.Color(0, 0, 0);
});
Isolate.$lazy($, "background", "Color_background", "get$Color_background", function() {
  return $.get$Color_black();
});
Isolate.$lazy($, "defaultColor", "Color_defaultColor", "get$Color_defaultColor", function() {
  return $.get$Color_black();
});
Isolate.$lazy($, "shiny", "Surfaces_shiny", "get$Surfaces_shiny", function() {
  return new $.CustomSurface($.get$Color_white(), $.get$Color_grey(), 250, 0.7);
});
Isolate.$lazy($, "checkerboard", "Surfaces_checkerboard", "get$Surfaces_checkerboard", function() {
  return new $.CheckerBoardSurface(150);
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=raytracer.dart.js.map
